apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "manager.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    app: {{ template "manager.fullname" . }}
    chart: {{ template "manager.fullname" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ template "manager.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        logType: "scala"
        app: {{ template "manager.name" . }}
        release: {{ .Release.Name }}
        logging: "true"
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/docker-secret.yaml") . | sha256sum }}
    spec:
      serviceAccountName: {{ if .Values.serviceAccount.name }}{{ .Values.serviceAccount.name }}{{ else }}"hydro-serving-manager-sa-{{ .Release.Name }}"{{ end }}
      containers:
        - name: dind
          image: docker:18.06.0-ce-dind
          securityContext:
            privileged: true
          {{- if .Values.global.registry.ingress.enabled }}
            {{- if .Values.global.registry.insecure }}
          args: [{{ printf "--insecure-registry=%s" (include "docker-registry.ingress.url" .) }}]
            {{- else }}
          args: [] # use default arguments for secure registry with enabled ingress
            {{- end }}
          {{- else }}
            {{- if and .Values.global.registry.url .Values.global.registry.insecure }}
          args: [{{ printf "--insecure-registry=%s" .Values.global.registry.url }}]
            {{- else if and (eq .Values.global.registry.url "") .Values.global.registry.insecure }}
          args: [{{ printf "--insecure-registry=%s" (printf "%s-docker-registry.%s.svc.cluster.local:5000" .Release.Name .Release.Namespace) }}]
            {{- else }}
          args: [] #use default arguments for secure registry with disabled ingress
            {{- end }}
          {{- end }}
        - name: kubectl-proxy
          image: xian310/kubectl-proxy:1.18.11
          imagePullPolicy: {{ .Values.image.pullPolicy }}
        - name: {{ .Chart.Name }}
          image: {{ if .Values.image.full }}"{{ .Values.image.full }}"{{ else }}"{{ .Values.image.repository }}:{{ .Values.image.tag }}"{{ end }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 9090
              protocol: TCP
            - name: grpc
              containerPort: 9091
              protocol: TCP
          env:
            - name: CUSTOM_CONFIG
              value: "/app/config/k8s.conf"
            - name: JAVA_OPTS
              value: {{ .Values.javaOpts | quote }}
            - name: DATABASE_HOST
              value: {{ if .Values.global.postgresql.url }}"{{ .Values.global.postgresql.url }}"{{ else }}"{{ template "postgresql.fullname" . }}" {{ end }}
            - name: DATABASE_NAME
              value: "{{ .Values.global.postgresql.database }}"
            - name: DATABASE_USERNAME
              value: "{{ .Values.global.postgresql.username }}"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ template "postgresql.fullname" . }}
                  key: postgresql-password
            - name: DOCKER_HOST
              value: "tcp://localhost:2375" # dind
            - name: KUBE_REGISTRY_SECRET_NAME
              value: "docker-credentials-{{ .Release.Name }}"
            - name: KUBE_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            {{- if ne .Values.global.registry.url "" }}
            - name: REMOTE_DOCKER_REGISTRY_HOST
              value: "{{ .Values.global.registry.url }}"
            - name: REMOTE_DOCKER_PULL_HOST
              value: "{{ .Values.global.registry.url }}"
            {{- else if .Values.global.registry.ingress.enabled }}
            - name: REMOTE_DOCKER_REGISTRY_HOST
              value: "{{ include "docker-registry.ingress.url" . | trimSuffix "/" }}"
            - name: REMOTE_DOCKER_PULL_HOST
              value: "{{ include "docker-registry.ingress.url" . | trimSuffix "/" }}"
            {{- else }}
            - name: REMOTE_DOCKER_REGISTRY_HOST
              value: "{{ template "docker-registry.fullname" . }}.{{.Release.Namespace}}.svc.cluster.local:5000"
            {{- end }} 
            {{- if ne .Values.global.registry.url "" }}
            - name: REMOTE_DOCKER_REGISTRY_PASSWORD
              value: "{{ .Values.global.registry.password }}"
            {{- else }}
            - name: REMOTE_DOCKER_REGISTRY_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "{{ .Release.Name }}-docker-registry-secret"
                  key: "password"            
            {{- end }}
            - name: REMOTE_DOCKER_REGISTRY_USERNAME
              value: "{{ .Values.global.registry.username }}"
            {{- with .Values.env }}
              {{ toYaml . | indent 12 }}
            {{- end }}
          volumeMounts:
            - name: dockerconfig
              mountPath: "/root/.docker"
              readOnly: true
            - name: {{ template "manager.fullname" . }}-config
              mountPath: "/app/config/"
              readOnly: true
          livenessProbe:
            initialDelaySeconds: 40
            httpGet:
              path: /health
              port: http
          readinessProbe:
            initialDelaySeconds: 40
            httpGet:
              path: /health
              port: http
          resources:
{{ toYaml .Values.resources | indent 12 }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
{{- if .Values.global.tolerations }}  
      tolerations:
{{ toYaml .Values.global.tolerations | indent 8 }}
{{- end }}
      volumes:
        - name: {{ template "manager.fullname" . }}-config
          configMap:
            name: {{ template "manager.fullname" . }}-config
            items:
              - key: k8s.conf
                path: k8s.conf
        - name: dockerconfig
          secret:
            secretName: "docker-credentials-{{ .Release.Name }}"
            items:
              - key: ".dockerconfigjson"
                path: "config.json"
